{"version":3,"sources":["assets/images/il_pomodoro.png","assets/audio/alarm_clock.mp3","Components/progress.js","Components/timer.js","Components/timerPopup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Progress","props","useState","imgClass","setImgClass","useEffect","finished","Audio","alarm","play","setTimeout","className","value","percentage","text","styles","buildStyles","pathColor","trailColor","src","tomato","alt","onClick","ev","toggleTimer","Timer","title","setNewState","currentState","name","Update","fontSize","showPopup","hours","String","Math","floor","time","minutes","seconds","padStart","showTime","Button","variant","color","resetTimer","AlarmOff","TimerPopup","splitTime","timeInSeconds","focus","focusTime","shortBreak","shortBreakTime","longBreak","longBreakTime","times","setTimes","onChangeTimes","input","event","newTimes","JSON","parse","stringify","target","type","onChange","timerValues","parseInt","setTimer","hidePopup","onSubmit","theme","createMuiTheme","palette","primary","main","secondary","App","totalTime","setTotalTime","running","setRunning","setTime","setPercentage","setFinished","setFocusTime","setShortBreakTime","setLongBreakTime","timerPopup","setTimerPopup","states","index","setCurrentState","finishedSessions","setFinishedSessions","timer","useRef","current","clearTimeout","change","state","changeState","newTime","newFinishedSessions","map","item","push","filter","length","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.347e30b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/il_pomodoro.ba023f0c.png\";","module.exports = __webpack_public_path__ + \"static/media/alarm_clock.f969cfae.mp3\";","import React, { useState, useEffect } from 'react';\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport tomato from '../assets/images/il_pomodoro.png';\nimport alarm from '../assets/audio/alarm_clock.mp3';\n\nfunction Progress(props) {\n    const [imgClass, setImgClass] = useState('tomato');\n\n    useEffect(() => {\n        if(props.finished) {\n            var audio = new Audio(alarm);\n            audio.play();\n            setImgClass('tomato shake');\n            setTimeout(() => {setImgClass('tomato')}, 4000);\n        }\n    }, [props.finished]);\n\n    return (\n        <div className=\"progress\">\n            <CircularProgressbar \n                value={props.percentage} \n                text='' \n                styles={buildStyles({\n                    pathColor: '#64908A',\n                    trailColor: '#424254'\n                })}\n            />\n            <img src={tomato} className={imgClass} alt=\"tomato\" onClick={(ev) => {\n                props.toggleTimer();\n            }} />\n        </div>\n    );\n}\n    \nexport default Progress;\n    ","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport { Update, AlarmOff } from '@material-ui/icons';\n\nfunction Timer(props) {\n    \n    const showTime = () => {\n        const hours = String(Math.floor(props.time / 3600));\n        const minutes = String(Math.floor((props.time%3600) / 60));\n        const seconds = String((((props.time%3600)%60)));\n\n        return (\n            hours.padStart(2, '0') + ':' + \n            minutes.padStart(2, '0') + ':' + \n            seconds.padStart(2, '0')\n        );\n    }\n\n    return (\n        <div className=\"timer\">\n            <h3 title=\"Change focus mode\" onClick={() => props.setNewState()}>\n                {props.currentState.name}\n                <Update \n                    fontSize=\"large\" \n                />\n            </h3>\n            <div className=\"counter\">\n                <span onClick={() => props.showPopup()}>{showTime()}</span>\n            </div>\n            <div>\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => props.resetTimer()}>\n                    <AlarmOff />\n                </Button>\n            </div>\n        </div>\n    );\n}\n    \nexport default Timer;\n    ","import React, {useState} from 'react';\n\nimport Button from '@material-ui/core/Button';\n\nfunction TimerPopup(props) {\n\n    const splitTime = (timeInSeconds) => {\n        const hours = String(Math.floor(timeInSeconds / 3600));\n        const minutes = String(Math.floor((timeInSeconds%3600) / 60));\n        const seconds = String((((timeInSeconds%3600)%60)));\n\n        return {\n            hours: hours.padStart(2, '0'),\n            minutes: minutes.padStart(2, '0'),\n            seconds: seconds.padStart(2, '0')\n        };\n    }\n\n    const [times, setTimes] = useState({\n       focus: splitTime(props.focusTime),\n       shortBreak: splitTime(props.shortBreakTime),\n       longBreak: splitTime(props.longBreakTime)\n    });\n\n    const onChangeTimes = (input, time, event) => {\n        let newTimes = JSON.parse(JSON.stringify(times));\n        newTimes[input][time] = event.target.value;\n        setTimes(newTimes);\n    }\n\n    const onSubmit = () => {\n        const timerValues = {\n            focus: parseInt(times.focus.hours)*3600 + parseInt(times.focus.minutes)*60 + parseInt(times.focus.seconds),\n            shortBreak: parseInt(times.shortBreak.hours)*3600 + parseInt(times.shortBreak.minutes)*60 + parseInt(times.shortBreak.seconds),\n            longBreak: parseInt(times.longBreak.hours)*3600 + parseInt(times.longBreak.minutes)*60 + parseInt(times.longBreak.seconds)\n        }\n\n        props.setTimer(timerValues);\n        props.hidePopup();\n    }\n\n    return (\n        <div className=\"overlay\">\n            <div className=\"timerPopup\">\n                <section>\n                    <h3>Focus</h3>\n                    <input type=\"number\" name=\"hours\" value={times.focus.hours} onChange={(event) => onChangeTimes('focus', 'hours', event)} />\n                    :\n                    <input type=\"number\" name=\"minutes\" value={times.focus.minutes} onChange={(event) => onChangeTimes('focus', 'minutes', event)} />\n                    :\n                    <input type=\"number\" name=\"seconds\" value={times.focus.seconds} onChange={(event) => onChangeTimes('focus', 'seconds', event)} />\n                </section>\n\n                <section>\n                    <h3>Short break</h3>\n                    <input type=\"number\" name=\"hours\" value={times.shortBreak.hours} onChange={(event) => onChangeTimes('shortBreak', 'hours', event)} />\n                    :\n                    <input type=\"number\" name=\"minutes\" value={times.shortBreak.minutes} onChange={(event) => onChangeTimes('shortBreak', 'minutes', event)} />\n                    :\n                    <input type=\"number\" name=\"seconds\" value={times.shortBreak.seconds} onChange={(event) => onChangeTimes('shortBreak', 'seconds', event)} />\n                </section>\n\n                <section>\n                    <h3>Long break</h3>\n                    <input type=\"number\" name=\"hours\" value={times.longBreak.hours} onChange={(event) => onChangeTimes('longBreak', 'hours', event)} />\n                    :\n                    <input type=\"number\" name=\"minutes\" value={times.longBreak.minutes} onChange={(event) => onChangeTimes('longBreak', 'minutes', event)} />\n                    :\n                    <input type=\"number\" name=\"seconds\" value={times.longBreak.seconds} onChange={(event) => onChangeTimes('longBreak', 'seconds', event)} />\n                </section>\n\n                <Button variant=\"contained\" color=\"primary\" onClick={() => onSubmit()}>\n                    Set Timer\n                </Button>\n                &nbsp;&nbsp;\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => props.hidePopup()}>\n                    Cancel\n                </Button>\n            </div>\n        </div>\n    );\n}\n    \nexport default TimerPopup;\n    ","import React, { useState, useEffect, useRef } from 'react';\n\nimport Progress from './Components/progress';\nimport Timer from './Components/timer';\nimport TimerPopup from './Components/timerPopup';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport 'react-circular-progressbar/dist/styles.css';\nimport './assets/css/main.css';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#64908A',\n        },\n        secondary: {\n            main: '#CC2A41',\n        },\n    },\n});\n\nfunction App() {\n    const [totalTime, setTotalTime] = useState(3);\n    const [running, setRunning] = useState(false);\n    const [time, setTime] = useState(totalTime);\n    const [percentage, setPercentage] = useState(0);\n    const [finished, setFinished] = useState(false);\n    \n    const [focusTime, setFocusTime] = useState(totalTime);\n    const [shortBreakTime, setShortBreakTime] = useState(300);\n    const [longBreakTime, setLongBreakTime] = useState(600);\n    \n    const [timerPopup, setTimerPopup] = useState(false);\n\n    const states = [\n        {index: 'focus', name: 'Focus'},\n        {index: 'shortBreak', name: 'Short Break'},\n        {index: 'longBreak', name: 'Long Break'}\n    ];\n\n    const [currentState, setCurrentState] = useState('focus');\n    const [finishedSessions, setFinishedSessions] = useState([]);\n\n    let timer = useRef(null);\n\n    useEffect(() => {  \n        if(running) {\n            timer.current = setTimeout(() => {\n                setTime(time-1);\n            }, 1000);\n    \n            if(time === 0) {\n                setRunning(false);\n                setFinished(true);\n                clearTimeout(timer.current);\n            }\n        } else {\n            clearTimeout(timer.current);\n        }\n    }, [running, time, timer]);\n\n    useEffect(() => {\n        const perc = 100 - (time * 100) / totalTime;\n        setPercentage(perc);\n    }, [totalTime, time]);\n\n    const toggleTimer = () => {\n        if(time === 0) {\n            resetTimer();\n            setRunning(true);\n        } else {\n            setFinished(false);\n            setRunning(!running);\n        }\n    }\n\n    const resetTimer = (change) => {\n        \n        let state = currentState;\n        if(finished || change) {\n            state = changeState();\n        }\n        \n        clearTimeout(timer.current);\n\n        let newTime = focusTime;\n        switch(state) {\n            case 'shortBreak':\n                newTime = shortBreakTime;\n                break;\n            case 'longBreak':\n                newTime = longBreakTime;\n                break;\n            default:\n                newTime = focusTime;\n                break;\n        }\n                    \n        setTotalTime(newTime);\n        setTime(newTime);\n        setFinished(false);\n        setRunning(false);\n    }\n\n    const showPopup = () => {\n        setTimerPopup(true);\n    }\n\n    const hidePopup = () => {\n        setTimerPopup(false);\n    }\n\n    const setTimer = (times) => {\n        setFocusTime(times.focus);\n        setShortBreakTime(times.shortBreak);\n        setLongBreakTime(times.longBreak);\n        \n        if(!running) {\n            setTotalTime(times.focus);\n            setTime(times.focus);\n        } else {\n            if(time < times.focus) {\n                setTotalTime(times.focus);\n            } else {\n                clearTimeout(timer.current);\n                \n                setTotalTime(times.focus);\n                setTime(times.focus);\n                setRunning(true);\n                \n            }\n        }\n    }\n\n    const changeState = () => {\n        const newFinishedSessions = finishedSessions.map(item => item);\n        newFinishedSessions.push(currentState);\n        setFinishedSessions(newFinishedSessions);\n\n        const finishedFocus = newFinishedSessions.filter(item => item === 'focus');\n        \n        let state = 'empty';\n        if(finishedFocus.length === 4) {\n            setCurrentState('longBreak');\n            setFinishedSessions([]);\n            state = 'longBreak';\n        } else {\n            state = currentState === 'focus' ? 'shortBreak' : 'focus';\n            setCurrentState(state);\n        }\n        \n        return state;\n    }\n\n    const setNewState = () => {\n        resetTimer(true);\n    }\n\n    return (\n        <div className=\"main\">\n            <h1>Tomato Timer</h1>\n\n            <Progress percentage={percentage} toggleTimer={toggleTimer} finished={finished} />\n            <ThemeProvider theme={theme}>\n                <Timer \n                    time={time} \n                    resetTimer={resetTimer} \n                    showPopup={showPopup} \n                    currentState={states.filter(item => item.index === currentState)[0]}\n                    states = {states}\n                    setNewState = {setNewState}\n                    />\n                {\n                    timerPopup && \n                        <TimerPopup \n                            hidePopup={hidePopup} \n                            focusTime={focusTime}\n                            shortBreakTime={shortBreakTime}\n                            longBreakTime={longBreakTime}\n                            setTimer={setTimer}\n                            />\n                }\n            </ThemeProvider>\n        </div>\n        );\n    }\n    \n    export default App;\n    ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}